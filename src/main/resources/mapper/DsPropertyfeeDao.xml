<?xml version="1.0" encoding="UTF-8"?>
<!DOCTYPE mapper PUBLIC "-//mybatis.org//DTD Mapper 3.0//EN" "http://mybatis.org/dtd/mybatis-3-mapper.dtd">
<mapper namespace="cn.dsrank.communitymanagement.dao.DsPropertyfeeDao">

    <resultMap id="BaseResultMap" type="cn.dsrank.communitymanagement.entity.DsPropertyfee">
        <!--@Table ds_PropertyFee-->
        <result property="id" column="id" jdbcType="INTEGER"/>
        <result property="price" column="price" jdbcType="NUMERIC"/>
        <result property="desc" column="desc" jdbcType="VARCHAR"/>
        <result property="time" column="time" jdbcType="TIMESTAMP"/>
    </resultMap>

    <!--查询单个-->
    <select id="queryById" resultMap="BaseResultMap">
        select
          id, price, `desc`,`time`
        from ds_PropertyFee
        where id = #{id}
    </select>

    <!--查询指定行数据-->
    <select id="queryAllByLimit" resultMap="BaseResultMap">
        select
          id, price, `desc`,`time`
        from ds_PropertyFee
        <where>
            <if test="id != null">
                and id = #{id}
            </if>
            <if test="price != null">
                and price = #{price}
            </if>
            <if test="desc != null and desc != ''">
                and `desc` = #{desc}
            </if>
        </where>
        limit #{pageable.offset}, #{pageable.pageSize}
    </select>

    <!--通过实体作为筛选条件查询-->
    <select id="queryAll" resultMap="BaseResultMap">
        select
          id, price, `desc`,`time`
        from CommunityManagement.ds_PropertyFee
    </select>
    <!--统计总行数-->
    <select id="count" resultType="java.lang.Long">
        select count(1)
        from ds_PropertyFee
        <where>
            <if test="id != null">
                and id = #{id}
            </if>
            <if test="price != null">
                and price = #{price}
            </if>
            <if test="desc != null and desc != ''">
                and `desc` = #{desc}
            </if>
        </where>
    </select>

    <!--新增所有列-->
    <insert id="insert" keyProperty="id" useGeneratedKeys="true">
        insert into ds_PropertyFee(price, `desc`)
        values (#{price}, #{desc})
    </insert>

    <insert id="insertBatch" keyProperty="id" useGeneratedKeys="true">
        insert into ds_PropertyFee(price, `desc`)
        values
        <foreach collection="entities" item="entity" separator=",">
        (#{entity.price}, #{entity.desc})
        </foreach>
    </insert>

    <insert id="insertOrUpdateBatch" keyProperty="id" useGeneratedKeys="true">
        insert into ds_PropertyFee(price, `desc`)
        values
        <foreach collection="entities" item="entity" separator=",">
            (#{entity.price}, #{entity.desc})
        </foreach>
        on duplicate key update
        price = values(price),
        desc = values(desc)
    </insert>

    <!--通过主键修改数据-->
    <update id="update">
        update ds_PropertyFee
        <set>
            <if test="price != null">
                price = #{price},
            </if>
            <if test="desc != null and desc != ''">
                `desc` = #{desc},
            </if>
        </set>
        where id = #{id}
    </update>

    <!--通过主键删除-->
    <delete id="deleteById">
        delete from ds_PropertyFee where id = #{id}
    </delete>
    <select id="queryCount" resultType="java.lang.Integer">
        select count(1) from CommunityManagement.ds_PropertyFee
    </select>
    <select id="queryByPage" resultMap="BaseResultMap">
        select * from CommunityManagement.ds_PropertyFee order by  `time`  desc limit #{start},#{count}
    </select>

    <select id="queryUserPayCount" resultType="java.lang.Integer">
        select count(1) from ds_PropertyFee where ds_PropertyFee.time > (select in_time from ds_UserInfo where userId = #{userid}) order by time desc
    </select>

    <select id="queryUserByPage" resultMap="BaseResultMap">
        select * from ds_PropertyFee where ds_PropertyFee.time > (select in_time from ds_UserInfo where userId = #{userid}) order by time desc limit #{start},#{count}
    </select>
</mapper>
